* The New Generation (NG) communication specification added the following features:
    1. End-to-end encryption support.
    2. An extended header to allow for the exchange of more information.
    3. A form system to allow the app to easily send required information to the server.
    4. A request system to allow NG apps to carry out administrative tasks in addition to accessing patient diet orders.
    4b. An authentication system to only allow authorized users to access/modify sensitive/administrative information.
    5. Proper replies for errors.
* The server still supports the LEGACY communication specification, though its use by NG apps is discouraged.
* Better handling of HTTP responses, including the sharing of `ng_com_spec` and this document.

08/20/2024
* Added a UserDatabase.
* Added userID and userAC fields to all secure forms
* Added txTime field to secure forms
* Made meals IID-specific (Added SPEC for form FDR-5)

08/20/2024 @ 18:17
* Added EXH->bytes convertor
* Added (NG,EXH)->bytes convertor

08/22/2024 @ 16:08
* Added BLOCK_ENCRYPT_DATA and BLOCK_DECRYPT_DATA to allow for the encryption and decryption of larger messages.

08/26/2024 @ 19:43
* Added a complete logging system
    - Blockchain for detecting log tampering.
    - Custom "validation" files for the above.
* Integrated logger into ng.py, legacy.py, _template.py, and _db_manager.py.

08/27/2024 @ 22:29
* Started work on server and client scripts.
* Boilerplate for LogParser

08/28/2024 @ 19:44
* Completed LogParser
* Reworked .hf files for blockchains to make them more efficient.
    - Also makes validation slightly faster.

08/30/2024 @ 19:49
* Modifications to `ng_com_spec`
    - Ability to modify user records
    - "Intent descriptions" for post-connection-establishment communications.
* Framework for _con_comm in `sc_server/ng.py`
    - Data checking/validation
* Update README.md
* Added a basic log parser to convert "BC"&HF logs to easy-to-read txt files.
* Change to Logger to allow for subdivision of logs into `server` and `client` folders.
    - `val` folder still used for `.hf` files.

Bugfix:
    * Removed '%' format characters in some lines to avoid inadvertant formatting errors.

09/01/2024 @ 20:16
* Experimented w/ 20 concurrent clients (see logs in README.md)
* Boilerplate for GET, NEW, DEL, and UPD commands.

Bugfix:
* Added a missing `i += 1` line in `_con_conn` which had previously led to a frozen server upon the second request.

09/03/2024
* Ability to filter out forms from client ECC requests.
* Added a shutdown tasks "plugin" for servers.
* Added MAX_LOOP_ITER and MAX_LOOP_TIME settings/config to ncom.config
    - Implemented in NG server; will not be implemented in LEGACY server.
    - Need to "register" a loop to add protections.
    - Protects from cases that stall an application.
    - Reconfigured ng.com_hist_key to be a "protected" loop.
* Modified code in `client.py` to only send 1 request. Old code left but commented-out for testing.
* Added ClientUtils.verify to check transmissions and decypher messages.
    - Bugfix: added protections to ClientUtils.parse and ClientUtils.verify to make sure that messages w/ no header (usually errors) do not cause problems.
* Added debug information to EXT_HEADER loader.
* Removed the '<end>' string appended to messages sent by `ng._con_conn`.
* Changed Structs.Transmission to accommodate `NoneType` headers.



TODO:
* Add a system to check that repeat commands are not issued w/ the same TX time (to make sure that transmissions cannot be cloned)
* Add a CLI for modifying user records.
* Log transmissions.
    - Add a toggle (setting) for that
* Rework logging system to make .hf files more efficient.
    - Unify .hf file generation for more (stability ?)
